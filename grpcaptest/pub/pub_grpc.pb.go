// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pub

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	CustomerAdd(ctx context.Context, in *CustomerAddRequest, opts ...grpc.CallOption) (*Customer, error)
	CustomerDelete(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Customer, error)
	CustomerGet(ctx context.Context, in *CustomerGetRequest, opts ...grpc.CallOption) (*Customer, error)
	CustomerGetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListCustomerResponse, error)
	CustomerUpdate(ctx context.Context, in *CustomerUpdateRequest, opts ...grpc.CallOption) (*Customer, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CustomerAdd(ctx context.Context, in *CustomerAddRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/pub.Service/CustomerAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CustomerDelete(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/pub.Service/CustomerDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CustomerGet(ctx context.Context, in *CustomerGetRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/pub.Service/CustomerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CustomerGetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListCustomerResponse, error) {
	out := new(ListCustomerResponse)
	err := c.cc.Invoke(ctx, "/pub.Service/CustomerGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CustomerUpdate(ctx context.Context, in *CustomerUpdateRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/pub.Service/CustomerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	CustomerAdd(context.Context, *CustomerAddRequest) (*Customer, error)
	CustomerDelete(context.Context, *empty.Empty) (*Customer, error)
	CustomerGet(context.Context, *CustomerGetRequest) (*Customer, error)
	CustomerGetAll(context.Context, *empty.Empty) (*ListCustomerResponse, error)
	CustomerUpdate(context.Context, *CustomerUpdateRequest) (*Customer, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) CustomerAdd(context.Context, *CustomerAddRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerAdd not implemented")
}
func (*UnimplementedServiceServer) CustomerDelete(context.Context, *empty.Empty) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerDelete not implemented")
}
func (*UnimplementedServiceServer) CustomerGet(context.Context, *CustomerGetRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGet not implemented")
}
func (*UnimplementedServiceServer) CustomerGetAll(context.Context, *empty.Empty) (*ListCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGetAll not implemented")
}
func (*UnimplementedServiceServer) CustomerUpdate(context.Context, *CustomerUpdateRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerUpdate not implemented")
}
func (*UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_CustomerAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CustomerAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.Service/CustomerAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CustomerAdd(ctx, req.(*CustomerAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CustomerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CustomerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.Service/CustomerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CustomerDelete(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CustomerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CustomerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.Service/CustomerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CustomerGet(ctx, req.(*CustomerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CustomerGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CustomerGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.Service/CustomerGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CustomerGetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CustomerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CustomerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.Service/CustomerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CustomerUpdate(ctx, req.(*CustomerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pub.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomerAdd",
			Handler:    _Service_CustomerAdd_Handler,
		},
		{
			MethodName: "CustomerDelete",
			Handler:    _Service_CustomerDelete_Handler,
		},
		{
			MethodName: "CustomerGet",
			Handler:    _Service_CustomerGet_Handler,
		},
		{
			MethodName: "CustomerGetAll",
			Handler:    _Service_CustomerGetAll_Handler,
		},
		{
			MethodName: "CustomerUpdate",
			Handler:    _Service_CustomerUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pub.proto",
}
